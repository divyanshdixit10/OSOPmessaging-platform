version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: osop-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: messaging_platform
      MYSQL_USER: messaging_user
      MYSQL_PASSWORD: messaging_pass
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./Backend/src/main/resources/db/migration:/docker-entrypoint-initdb.d
    networks:
      - osop-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --default-authentication-plugin=mysql_native_password

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: osop-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - osop-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: osop-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - osop-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      timeout: 30s
      retries: 3

  # Backend Spring Boot Application
  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    container_name: osop-backend
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/messaging_platform?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: messaging_user
      SPRING_DATASOURCE_PASSWORD: messaging_pass
      SPRING_DATA_REDIS_HOST: redis
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_USERNAME: admin
      SPRING_RABBITMQ_PASSWORD: admin123
      SPRING_MAIL_HOST: mailhog
      SPRING_MAIL_PORT: 1025
      SPRING_MAIL_USERNAME: test
      SPRING_MAIL_PASSWORD: test
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH: false
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: false
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED: true
      FRONTEND_URL: http://frontend:3000
    ports:
      - "8080:8080"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mailhog:
        condition: service_started
    networks:
      - osop-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      timeout: 10s
      retries: 5
      start_period: 60s

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: osop-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:8080/api
      REACT_APP_WS_URL: ws://localhost:8080/ws
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - osop-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: osop-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - osop-network
      
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: osop-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - osop-network
    depends_on:
      - backend
      
  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: osop-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - osop-network
    depends_on:
      - prometheus
      
  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: osop-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025" # SMTP server
      - "8025:8025" # Web UI
    networks:
      - osop-network

volumes:
  mysql_data:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:

networks:
  osop-network:
    driver: bridge
